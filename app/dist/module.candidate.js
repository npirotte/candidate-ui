'use strict';

+(function () {
  'use strict';

  angular.module('app.candidate', []).config(['$stateProvider', CandidateModuleConfig]);

  function CandidateModuleConfig($stateProvider) {
    $stateProvider.state('app.candidate', {
      url: '/candidate',
      views: {
        'main@app': {
          templateUrl: 'src/candidate/candidates.html',
          controller: 'CandidatesController as candidatesController'
        }
      }
    });
  }
})();

+(function () {
  'use strict';

  angular.module('app.candidate').factory('CandidateResource', ['$resource', '$http', CandidateResource]);

  var URL = '/candidate/:id';

  function CandidateResource($resource, $http) {

    var Candidate = $resource(URL, { id: '@id' });

    // custom $update methods
    // $update could have been a $resource method, but has the server respond nothing, the model is erased on $update, prototype method is more fine tuned
    // @return : promise
    Candidate.prototype.$update = function () {
      var url = URL.replace(':id', this.id);
      var data = this.toJSON();

      if (data.selected) delete data.selected;
      if (data.hasError) delete data.hasError;

      return $http.put(url, this.toJSON());
    };

    // static deleteMany method
    // @params : ids : [...id]
    // @return : promise
    Candidate.deleteMany = function (ids) {
      var url = '/candidate/delete';
      return $http.post(url, ids);
    };

    // static model validation & defaultValue data
    Candidate.model = {
      name: {
        required: true,
        minLength: 1,
        maxLength: 30,
        defaultValue: null
      },
      enabled: {
        defaultValue: true
      }
    };

    return Candidate;
  }
})();

/* global swal */

+(function () {
  'use strict';

  var reorderIcons = ['glyphicon glyphicon-chevron-up', 'glyphicon glyphicon-chevron-down'];

  angular.module('app.candidate').controller('CandidatesController', ['CandidateResource', CandidatesController]);

  function CandidatesController(CandidateResource) {

    var self = this;

    this.candidates = CandidateResource.query();

    this.orderProp = null;
    this.reverse = false;

    /* **** public methods **** */

    // change the ordering prop or reverse ordering
    // @param : <string> orderProp
    this.reorder = function (orderProp) {
      if (self.orderProp === orderProp) {
        self.reverse = !self.reverse;
      } else {
        self.orderProp = orderProp;
        self.reverse = false;
      }
    };

    // return the correct className for table header cells
    // @param : <string> orderProp
    // @output : <string> className
    this.reorderIconClass = function (orderProp) {
      if (self.orderProp !== orderProp) return false;
      return reorderIcons[self.reverse ? 1 : 0];
    };

    // selected / deselect all rows
    // @param : native event
    this.toggleSelection = function (event) {
      self.candidates.forEach(function (candidate) {
        candidate.selected = event.target.checked;
      });
    };

    // output selected rows count
    // @return <int> count
    this.selectedCandidatesNbr = function () {
      var selectedCandidates = self.candidates.filter(function (candidate) {
        return candidate.selected;
      });
      return selectedCandidates.length > 0;
    };

    // add a new candidate
    // @param : {object} candidateModel
    this.addCandidate = function (candidate) {
      self.candidates.push(candidate);
    };

    // delete selected Candidate
    this.deleteCandidates = function () {
      var candidatesToDelete = [];

      self.candidates.forEach(function (candidate) {
        if (candidate.selected) candidatesToDelete.push(candidate.id);
      });

      swal({
        title: 'Are you sure?',
        text: 'You will delete ' + candidatesToDelete.length + ' candidate' + (candidatesToDelete.length > 1 ? 's' : '') + '.',
        //type : 'warning',
        showCancelButton: true,
        closeOnConfirm: false
      }, function () {

        CandidateResource.deleteMany(candidatesToDelete).then(function () {
          swal('Deleted !', 'Selected candidates have been deleted.', 'success');
          self.candidates = self.candidates.filter(function (candidate) {
            return candidatesToDelete.indexOf(candidate.id) < 0;
          });
        });
      });
    };
  }
})();

+(function () {
  'use strict';

  angular.module('app.candidate').directive('candidate', ['growl', Candidate]);

  function Candidate(growl) {
    return {
      restrict: 'A',
      replace: true,
      templateUrl: './src/candidate/candidate/candidate.html',
      scope: {
        candidate: '='
      },
      bindToController: true,
      controller: function controller() {
        var self = this;

        // retry candidate creation if previous fail;
        this.retrySave = function () {
          if (self.candidate.id) return false;

          delete self.candidate.hasError;
          self.candidate.$save().then(function () {
            growl.success('Candidate ' + self.candidate.name + ' saved !');
          }, function () {
            growl.error('An error occured.');
            self.candidate.hasError = true;
          });
        };

        // update the candidate
        this.update = function () {
          self.candidate.$update().then(function () {
            growl.success('Candidate ' + self.candidate.name + ' updated !');
          }, function () {
            growl.error('An error occured.');
          });
        };
      },
      controllerAs: 'candidateController'
    };
  }
})();

+(function () {
  'use strict';

  angular.module('app.candidate').directive('candidateForm', ['CandidateResource', 'growl', Candidate]);

  function Candidate(CandidateResource, growl) {
    return {
      restrict: 'E',
      templateUrl: './src/candidate/candidate-form/candidate-form.html',
      scope: {
        onAdd: '&'
      },
      bindToController: true,
      controller: function controller() {
        var self = this;

        this.candidate = {
          name: CandidateResource.model.name.defaultValue,
          enabled: CandidateResource.model.enabled.defaultValue
        };

        this.nameValidation = CandidateResource.model.name;

        this.addCandidate = function (form) {
          if (form.$invalid) return false;

          var candidate = new CandidateResource(self.candidate);

          candidate.$save().then(function () {
            growl.success('Candidate ' + candidate.name + ' added !');
          }, function () {
            growl.error('An error occured.');
            candidate.hasError = true;
          });

          self.onAdd({ candidate: candidate });

          form.$setPristine();
          this.candidate.name = null;
        };
      },
      controllerAs: 'candidateFormController'
    };
  }
})();
//# sourceMappingURL=data:application/json;base64,